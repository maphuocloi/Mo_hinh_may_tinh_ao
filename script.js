
// Data parts mapping to audio file names (use the files you uploaded in sounds/)
const PARTS = {
  cpu: {
    title: 'CPU (B·ªô x·ª≠ l√Ω trung t√¢m)',
    text: 'CPU l√† trung t√¢m x·ª≠ l√Ω l·ªánh c·ªßa m√°y t√≠nh. N√≥ th·ª±c hi·ªán ph√©p to√°n, x·ª≠ l√Ω l·ªánh t·ª´ ch∆∞∆°ng tr√¨nh v√† ƒëi·ªÅu ph·ªëi ho·∫°t ƒë·ªông gi·ªØa c√°c thi·∫øt b·ªã. T·ªëc ƒë·ªô x·ª≠ l√Ω ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp t·ªõi hi·ªáu nƒÉng ch·∫°y ch∆∞∆°ng tr√¨nh.',
    audio: 'sounds/cpu.mp3'
  },
  ram: {
    title: 'RAM (B·ªô nh·ªõ truy c·∫≠p ng·∫´u nhi√™n)',
    text: 'RAM l∆∞u tr·ªØ d·ªØ li·ªáu t·∫°m th·ªùi khi ch∆∞∆°ng tr√¨nh ch·∫°y. RAM r·∫•t nhanh nh∆∞ng khi t·∫Øt ngu·ªìn d·ªØ li·ªáu trong RAM s·∫Ω b·ªã m·∫•t. RAM gi√∫p CPU truy c·∫≠p d·ªØ li·ªáu v√† ch∆∞∆°ng tr√¨nh nhanh h∆°n.',
    audio: 'sounds/ram.mp3'
  },
  mainboard: {
    title: 'Mainboard (Bo m·∫°ch ch·ªß)',
    text: 'Mainboard l√† b·∫£n m·∫°ch ch√≠nh k·∫øt n·ªëi t·∫•t c·∫£ c√°c b·ªô ph·∫≠n: CPU, RAM, ·ªï c·ª©ng, card ƒë·ªì h·ªça v√† c√°c thi·∫øt b·ªã ngo·∫°i vi. Mainboard cung c·∫•p khe c·∫Øm, giao ti·∫øp v√† c√°c chu·∫©n k·∫øt n·ªëi.',
    audio: 'sounds/mainboard.mp3'
  },
  hdd: {
    title: '·ªî c·ª©ng HDD / SSD',
    text: '·ªî c·ª©ng (HDD ho·∫∑c SSD) l∆∞u tr·ªØ d·ªØ li·ªáu l√¢u d√†i: h·ªá ƒëi·ªÅu h√†nh, ch∆∞∆°ng tr√¨nh v√† t·∫≠p tin c·ªßa ng∆∞·ªùi d√πng. SSD nhanh h∆°n HDD nhi·ªÅu l·∫ßn nh·ªù b·ªô nh·ªõ flash.',
    audio: 'sounds/hdd.mp3'
  },
  psu: {
    title: 'PSU (Ngu·ªìn m√°y t√≠nh)',
    text: 'PSU cung c·∫•p ƒëi·ªán cho to√†n b·ªô h·ªá th·ªëng, chuy·ªÉn ƒë·ªïi ƒëi·ªán l∆∞·ªõi sang c√°c m·ª©c ƒëi·ªán √°p ·ªïn ƒë·ªãnh cho mainboard, ·ªï c·ª©ng v√† c√°c linh ki·ªán kh√°c. Ngu·ªìn k√©m c√≥ th·ªÉ g√¢y l·ªói v√† gi·∫£m tu·ªïi th·ªç ph·∫ßn c·ª©ng.',
    audio: 'sounds/psu.mp3'
  },
  monitor: {
    title: 'M√†n h√¨nh (Monitor)',
    text: 'M√†n h√¨nh hi·ªÉn th·ªã h√¨nh ·∫£nh do card ƒë·ªì h·ªça xu·∫•t ra. ƒê·ªô ph√¢n gi·∫£i v√† t·∫ßn s·ªë qu√©t ·∫£nh ·∫£nh h∆∞·ªüng t·ªõi ch·∫•t l∆∞·ª£ng v√† m∆∞·ª£t c·ªßa h√¨nh ·∫£nh hi·ªÉn th·ªã.',
    audio: 'sounds/monitor.mp3'
  },
  keyboard: {
    title: 'B√†n ph√≠m',
    text: 'B√†n ph√≠m l√† thi·∫øt b·ªã nh·∫≠p li·ªáu ch√≠nh, cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p vƒÉn b·∫£n v√† ƒëi·ªÅu khi·ªÉn m√°y t√≠nh b·∫±ng ph√≠m ch·ª©c nƒÉng.',
    audio: 'sounds/keyboard.mp3'
  },
  mouse: {
    title: 'Chu·ªôt',
    text: 'Chu·ªôt gi√∫p ƒëi·ªÅu khi·ªÉn con tr·ªè tr√™n m√†n h√¨nh, ch·ªçn ƒë·ªëi t∆∞·ª£ng v√† thao t√°c tr√™n giao di·ªán ƒë·ªì h·ªça.',
    audio: 'sounds/mouse.mp3'
  },
  case: {
    title: 'V·ªè m√°y (Case)',
    text: 'V·ªè m√°y b·∫£o v·ªá c√°c linh ki·ªán b√™n trong, cung c·∫•p khe g·∫Øn, kh√¥ng gian cho t·∫£n nhi·ªát v√† c√°c v·ªã tr√≠ g·∫Øn ·ªï c·ª©ng, ngu·ªìn.',
    audio: 'sounds/case.mp3'
  }
};

// SpeechSynthesis
const synth = window.speechSynthesis || null;
let viVoice = null;
function findVietnameseVoice(){
  if(!synth) return null;
  const voices = synth.getVoices();
  viVoice = voices.find(v => v.lang && v.lang.startsWith('vi')) || voices.find(v=>v.name && v.name.toLowerCase().includes('vietnam'));
  return viVoice;
}
if(synth){ findVietnameseVoice(); speechSynthesis.onvoiceschanged = ()=> findVietnameseVoice(); }

function playAudioOrTTS(partKey){
  const part = PARTS[partKey];
  if(!part) return;
  const infoEl = document.getElementById('info');
  infoEl.innerHTML = '<strong>'+part.title+'</strong><p style="margin:6px 0 0">'+part.text+'</p>';
  // Try to play audio file first (if exists)
  const audio = new Audio(part.audio);
  audio.play().catch(err=>{
    // fallback to TTS
    if(synth){
      const u = new SpeechSynthesisUtterance(part.title + '. ' + part.text);
      if(viVoice) u.voice = viVoice;
      u.lang = (viVoice && viVoice.lang)? viVoice.lang : 'vi-VN';
      synth.cancel();
      synth.speak(u);
    } else {
      console.log('No audio and no TTS support');
    }
  });
}

// Attach hotspots
document.querySelectorAll('.hotspot').forEach(h=>{
  h.addEventListener('click', ()=>{
    const key = h.dataset.part;
    playAudioOrTTS(key);
  });
});

// Chatbot (simple rules)
const chatEl = document.getElementById('chat');
const qinput = document.getElementById('qinput');
const sendBtn = document.getElementById('send');
const voiceBtn = document.getElementById('voiceBtn');
function appendMsg(role, html){
  const d = document.createElement('div');
  d.className = 'msg ' + (role==='me'?'me':'');
  d.innerHTML = '<strong>' + (role==='me'? 'B·∫°n' : 'Tr·ª£ l√Ω') + ':</strong> ' + html;
  chatEl.appendChild(d); chatEl.scrollTop = chatEl.scrollHeight;
}
function botAnswer(text){
  const t = text.toLowerCase();
  if(t.includes('cpu')) return PARTS.cpu.text;
  if(t.includes('ram')) return PARTS.ram.text;
  if(t.includes('main')||t.includes('bo mach')||t.includes('mainboard')) return PARTS.mainboard.text;
  if(t.includes('hdd')||t.includes('ssd')||t.includes('·ªï c·ª©ng')) return PARTS.hdd.text;
  if(t.includes('ngu·ªìn')||t.includes('psu')) return PARTS.psu.text;
  if(t.includes('m√†n h√¨nh')||t.includes('monitor')) return PARTS.monitor.text;
  if(t.includes('b√†n ph√≠m')||t.includes('ph√≠m')) return PARTS.keyboard.text;
  if(t.includes('chu·ªôt')) return PARTS.mouse.text;
  if(t.includes('k·∫øt n·ªëi')||t.includes('connect')) return 'C√°c b·ªô ph·∫≠n k·∫øt n·ªëi qua Mainboard: CPU v√†o socket, RAM v√†o khe DIMM, ·ªï c·ª©ng qua SATA ho·∫∑c M.2, card ƒë·ªì h·ªça v√†o khe PCIe.';
  if(t.includes('ram') && t.includes('ssd')) return 'RAM l√† b·ªô nh·ªõ t·∫°m th·ªùi; SSD l√† l∆∞u tr·ªØ l√¢u d√†i.';
  if(t.includes('quiz')||t.includes('b√†i ki·ªÉm tra')) return 'B·∫°n c√≥ th·ªÉ m·ªü ph·∫ßn Quiz b·∫±ng n√∫t "L√†m Quiz" ƒë·ªÉ l√†m 10 c√¢u tr·∫Øc nghi·ªám.';
  return 'M√¨nh ch∆∞a hi·ªÉu r√µ, b·∫°n th·ª≠ h·ªèi l·∫°i c·ª• th·ªÉ h∆°n (v√≠ d·ª•: \"CPU d√πng ƒë·ªÉ l√†m g√¨?\")';
}
sendBtn.addEventListener('click', ()=>{
  const v = qinput.value.trim(); if(!v) return;
  appendMsg('me', escapeHtml(v)); qinput.value='';
  const ans = botAnswer(v);
  setTimeout(()=>{ appendMsg('bot', escapeHtml(ans)); speak(ans); }, 300);
});
qinput.addEventListener('keydown', e=>{ if(e.key==='Enter') sendBtn.click(); });

// Voice recognition
let recognition = null;
if('webkitSpeechRecognition' in window || 'SpeechRecognition' in window){
  const Recon = window.SpeechRecognition || window.webkitSpeechRecognition;
  recognition = new Recon();
  recognition.lang = 'vi-VN';
  recognition.interimResults = false;
  recognition.maxAlternatives = 1;
  voiceBtn.addEventListener('click', ()=>{
    try{ recognition.start(); voiceBtn.textContent='üéôÔ∏è...'; }catch(e){ alert('Kh√¥ng th·ªÉ b·∫≠t micro.'); }
  });
  recognition.onresult = (ev)=>{
    const spoken = ev.results[0][0].transcript;
    appendMsg('me', escapeHtml(spoken));
    const ans = botAnswer(spoken);
    appendMsg('bot', escapeHtml(ans));
    speak(ans);
    voiceBtn.textContent='üé§';
  };
  recognition.onerror = (ev)=>{ voiceBtn.textContent='üé§'; alert('L·ªói nh·∫≠n gi·ªçng n√≥i: ' + (ev.error || 'unknown')); };
  recognition.onend = ()=>{ voiceBtn.textContent='üé§'; };
} else {
  voiceBtn.addEventListener('click', ()=> alert('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i. D√πng Chrome ho·∫∑c nh·∫≠p b·∫±ng b√†n ph√≠m.'));
}

// TTS speak helper
const synth = window.speechSynthesis || null;
let viVoice = null;
function findVietnameseVoice(){ if(!synth) return null; const voices=synth.getVoices(); viVoice = voices.find(v=>v.lang&&v.lang.startsWith('vi'))||voices.find(v=>v.name&&v.name.toLowerCase().includes('vietnam')); return viVoice; }
if(synth){ findVietnameseVoice(); speechSynthesis.onvoiceschanged = ()=> findVietnameseVoice(); }
function speak(txt){ if(!synth) return; const u=new SpeechSynthesisUtterance(txt); if(viVoice) u.voice=viVoice; u.lang=(viVoice&&viVoice.lang)?viVoice.lang:'vi-VN'; synth.cancel(); synth.speak(u); }

// Quiz data and logic (same as earlier)
const QUIZ = [
  {q:'Thi·∫øt b·ªã n√†o th·ª±c hi·ªán l·ªánh v√† ph√©p to√°n ch√≠nh trong m√°y t√≠nh?', opts:['RAM','CPU','·ªî c·ª©ng','Mainboard'], a:1},
  {q:'RAM c√≥ ƒë·∫∑c ƒëi·ªÉm n√†o sau ƒë√¢y?', opts:['L∆∞u tr·ªØ l√¢u d√†i','L∆∞u t·∫°m th·ªùi khi b·∫≠t ngu·ªìn','Cung c·∫•p ƒëi·ªán','Hi·ªÉn th·ªã h√¨nh ·∫£nh'], a:1},
  {q:'Thi·∫øt b·ªã n√†o l∆∞u tr·ªØ d·ªØ li·ªáu l√¢u d√†i?', opts:['CPU','M√†n h√¨nh','·ªî c·ª©ng (HDD/SSD)','Chu·ªôt'], a:2},
  {q:'Mainboard c√≥ ch·ª©c nƒÉng g√¨ ch√≠nh?', opts:['K·∫øt n·ªëi c√°c b·ªô ph·∫≠n','L∆∞u tr·ªØ ng∆∞·ªùi d√πng','T·∫£n nhi·ªát CPU','Hi·ªÉn th·ªã h√¨nh ·∫£nh'], a:0},
  {q:'PSU c√≥ nhi·ªám v·ª• g√¨?', opts:['Cung c·∫•p ƒëi·ªán ·ªïn ƒë·ªãnh','L∆∞u tr·ªØ d·ªØ li·ªáu','X·ª≠ l√Ω l·ªánh','Hi·ªÉn th·ªã ·∫£nh'], a:0},
  {q:'Khi t·∫Øt ngu·ªìn, d·ªØ li·ªáu tr√™n RAM s·∫Ω:', opts:['V·∫´n c√≤n','M·∫•t ƒëi','T·ª± l∆∞u','Chuy·ªÉn sang CPU'], a:1},
  {q:'K·∫øt n·ªëi n√†o th∆∞·ªùng d√πng cho ·ªï SSD hi·ªán ƒë·∫°i t·ªëc ƒë·ªô cao?', opts:['SATA','IDE','M.2 NVMe','PS/2'], a:2},
  {q:'Thi·∫øt b·ªã n√†o l√† thi·∫øt b·ªã ƒë·∫ßu v√†o (input)?', opts:['M√†n h√¨nh','B√†n ph√≠m','·ªî c·ª©ng','Card ƒë·ªì h·ªça'], a:1},
  {q:'T·∫°i sao c·∫ßn ngu·ªìn (PSU) t·ªët?', opts:['TƒÉng hi·ªáu nƒÉng CPU','Cung c·∫•p ƒëi·ªán ·ªïn ƒë·ªãnh, b·∫£o v·ªá ph·∫ßn c·ª©ng','L∆∞u tr·ªØ nhi·ªÅu h∆°n','Hi·ªÉn th·ªã ƒë·∫πp h∆°n'], a:1},
  {q:'Khi mu·ªën n√¢ng c·∫•p ƒë·ªÉ ch·∫°y ph·∫ßn m·ªÅm n·∫∑ng, n√™n ∆∞u ti√™n n√¢ng c·∫•p:', opts:['Chu·ªôt','RAM ho·∫∑c CPU','M√†n h√¨nh','V·ªè m√°y'], a:1}
];
const quizModal = document.getElementById('quizModal');
const qNo = document.getElementById('qNo'); const qText = document.getElementById('qText'); const choicesEl = document.getElementById('choices');
const prevBtn = document.getElementById('prevBtn'); const nextBtn = document.getElementById('nextBtn'); const skipBtn = document.getElementById('skipBtn'); const finishBtn = document.getElementById('finishBtn');
let idx = 0; let answers = new Array(QUIZ.length).fill(null);
document.getElementById('btn-quiz').addEventListener('click', ()=>{ idx=0; openQuiz(); renderQ(); });
function openQuiz(){ quizModal.classList.add('open'); }
function closeQuiz(){ quizModal.classList.remove('open'); }
function renderQ(){ const item = QUIZ[idx]; qNo.textContent = (idx+1); qText.textContent = item.q; choicesEl.innerHTML = ''; item.opts.forEach((opt,i)=>{ const d=document.createElement('div'); d.className = 'choice' + (answers[idx]===i? ' selected':''); d.textContent = opt; d.addEventListener('click', ()=>{ answers[idx]=i; renderQ(); }); choicesEl.appendChild(d); }); prevBtn.disabled = idx===0; nextBtn.style.display = idx===QUIZ.length-1? 'none':'inline-block'; finishBtn.style.display = idx===QUIZ.length-1? 'inline-block':'none'; }
prevBtn.addEventListener('click', ()=>{ if(idx>0) idx--; renderQ(); });
nextBtn.addEventListener('click', ()=>{ if(idx<QUIZ.length-1) idx++; renderQ(); });
skipBtn.addEventListener('click', ()=>{ answers[idx]=null; if(idx<QUIZ.length-1) idx++; renderQ(); });
finishBtn.addEventListener('click', finishQuiz);
function finishQuiz(){ let score=0; for(let i=0;i<QUIZ.length;i++) if(answers[i]===QUIZ[i].a) score++; closeQuiz(); const result = 'B·∫°n ho√†n th√†nh quiz! ƒêi·ªÉm: ' + score + ' / ' + QUIZ.length; alert(result); appendMsg('bot', result); speak('B·∫°n ƒë√£ ho√†n th√†nh b√†i ki·ªÉm tra. ƒêi·ªÉm c·ªßa b·∫°n l√† ' + score + ' tr√™n ' + QUIZ.length); }
// close if click outside
quizModal.addEventListener('click', (e)=>{ if(e.target===quizModal) closeQuiz(); });
function escapeHtml(s){ return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); }
